=======
keyleds
=======

This implements a user-level driver library for
Logitech keyboards. It is a personal development project built by
capturing Logitech's software communications to the keyboard. Plus
some experiments throwing bytes at it.

* Tested on a G410 Atlas Spectrum keyboard.
* If you test it with other keyboards, please let me know what works.

Features
--------

The project is made of two parts: a library and a basic command-line
tool.

The following features are supported:

* Device enumeration and basic information (keyboard type,
  firmware version, â€¦).
* Inspection of device capabilities and led configuration.
* Individual key led control (set and get).
* Automatic translation between led identifiers and keycodes.
* Game-mode configuration
* Report rate configuration
* Library is written is pure C

A cli tool makes those features easily usable from any script.
Though at the moment, it only supports led control.

Partial Python3 bindings are provided.

Compiling
---------

Building keyleds requires the following dependencies to be installed:

* cmake
* libc development files
* libudev development files (recommended)
* python3 development files (optional, used for python bindings)
* cython3 (optional, used for python bindings)

The following one-liner should get you up and running on debian systems::

    sudo apt-get install build-essential cmake linux-libc-dev libudev-dev python3-dev cython

Build the project with the following command::

    cd build && cmake .. && make

This will place the ``keyledsctl`` utility in the build directory.

Dealing with device permissions
-------------------------------

By default, the keyboard device is not usable by any non-root user.
This means you may either:

* run this project (the cli tool or your own program using the lib) as root.
* configure your system to make the device accessible to other users.
  On udev-based systems, you can copy ``logitech.rules`` into
  ``/etc/udev/rules.d/90-logitech-plugdev.rules`` to automatically grant
  access to members of the ``plugdev`` group.

Using the cli tool
------------------

All features are not implemented yet, here is what works now. Listing
connected, supported devices::

    $ keyledsctl list
    /dev/hidraw1 046d:c330 [111111111111]

The number in square brackets is the USB serial number of the device.

Querying device information::

    $ keyledsctl info
    Name:           Gaming Keyboard G410
    Type:           keyboard
    Model:          c33000000000
    Serial:         xxxxxxxx
    Firmware[c330]: application U1  v1.002 r20 [active]
    Firmware[aabc]: bootloader BOT v14.000 r7
    Known features: feature version gamemode name reportrate leds led-effects
    Report rates:   [1ms] 2ms 4ms 8ms
    LED block[01]:  105 keys, max_rgb(255, 255, 255)
    LED block[40]:    2 keys, max_rgb(255, 255, 255)

Setting LED state. The subcommand takes a list of directives in the form
``key=color`` and applies them in order. Keys can be either their name,
their number or the special keyword ``all``::

    $ keyledsctl set-leds all=yellow enter=green f1=#ff00cd f2=#ff0cd

This would set all keys to be yellow, except ``enter``, ``F1`` and ``F2``, which
would be green and pink respectively. Recognized colors include all CSS color
names, and rgb values in hexa notation (ala web color). A list if recognized keys
can be obtained using ``get-leds``.

Getting LED state::

    $ keyledsctl get-leds
    A=#00dcff
    B=#00dcff
    ...
    RALT=#00dcff
    RMETA=#00dcff

Each key is output on a single line. The format is the same that is used by
``set-leds``, making it possible to save/restore LED status this way::

    # Saving a block of leds, such as keys, modes, gkeys...
    $ build/keyledsctl get-leds -b keys > savedkeys
    # Restoring the block of leds
    $ xargs <savedkeys build/keyledsctl set-leds -b keys

Setting blocked keys when game mode is enabled::

    $ keyledsctl gamemode lmeta rmeta compose

Dealing with multiple devices. Either device path or USB serial ca be used::

    $ keyledsctl list
    /dev/hidraw1 046d:c330 [111111111111]
    /dev/hidraw5 046d:c330 [222222222222]
    /dev/hidraw7 046d:c330 [333333333333]
    $ keyledsctl set-leds -d /dev/hidraw1 all=red
    $ keyledsctl set-leds -d 222222222222 all=green
    $ export KEYLEDS_DEVICE=333333333333
    $ keyledsctl set-leds all=blue

This sequence would set the three attached keyboard to turn all red, all green
and all blue respectively. Note that if both and environment variable and
a command-line option are specified, the command-line option takes precedence.

Using the API
-------------

Simply include ``keyleds.h``, and link with ``libkeyleds.a``. Most functions
are self-explanatory. Have a look at ``src/keyledsctl.c`` for examples.
Open tickets if you need help. Code documentation should come with time.

Some functions allocate structures but don't have a matching ``*_free_*``
function. When you find some, please open an issue and use stdlib's ``free``
in the meantime.

Using python bindings
---------------------

Python3 bindings are experimental and still incomplete. Pull requests welcome.
To use them, simply build the project and copy ``pykeyleds.so`` into your
python project.

Here is a sample of what works::

    >>> import pykeyleds
    >>> dev = pykeyleds.Device('/dev/hidraw1', 1)
    >>> dev.name
    'Gaming Keyboard G410'
    >>> dev.type
    'keyboard'
    >>> dev.protocol
    4
    >>> dev.version
    DeviceVersion(model=c33000000000, serial=35344708, transport=8, protocols=(
        DeviceProtocol(0, product=0xc330, version='U1 v101.2.14', active=True),
        DeviceProtocol(1, product=0xaabc, version='BOTv114.0.7', active=False)
    ))
    >>> dev.features
    (1, 3, 17698, 5, 7680, 17728, 7856, 32864, 193, 6145, 6146, 32896, 32880, 6177)
    >>> dev.leds
    {'modes': KeyBlock('modes', 0x40, nb_keys=2, color=Color(255, 255, 255)),
     'keys': KeyBlock('keys', 0x01, nb_keys=105, color=Color(255, 255, 255))}
    >>> dev.leds['keys'].get_all()
    (KeyColor(KEY_A, id=4, Color(0, 205, 255),
     KeyColor(KEY_B, id=5, Color(0, 205, 255),
     ...
     KeyColor(KEY_RALT, id=230, Color(0, 205, 255),
     KeyColor(KEY_RMETA, id=231, Color(0, 205, 255))
    >>> dev.leds['keys'].set_all_keys(pykeyleds.Color(63, 191, 127))
    >>> dev.commit_leds()

All properties are read once at first access and cached. On the other hand,
methods in the form ``get_*`` query the device at every invocation.
